volumes:
  minio1_data:
  minio2_data:
  minio3_data:
  minio4_data:
  minio5_data:
  minio6_data:

networks:
  karma8:
    name: karma8
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16

services:
  api:
    container_name: karma8-api
    build:
      context: ./
      dockerfile: build/Dockerfile
    ports:
      - "8080:80"
    environment:
      - ENV_NAME=${ENV_NAME}
      - API_VERSION=${API_VERSION}
      - FILE_STORAGE_SECRET=${FILE_STORAGE_SECRET}
      - MYSQL_SERVER=${MYSQL_SERVER}
      - MYSQL_DBNAME=${MYSQL_DBNAME}
      - REDIS_TYPE=${REDIS_TYPE}
      - REDIS_ADDR=${REDIS_ADDR}
    restart: on-failure
    networks:
      - karma8

  storage1:
    container_name: karma8-storage1
    build:
      context: ./
      dockerfile: build/Dockerfile
    ports:
      - "8081:80"
    environment:
      - ENV_NAME=${ENV_NAME}
      - API_VERSION=${API_VERSION}
      - MYSQL_SERVER=${MYSQL_SERVER}
      - MYSQL_DBNAME=${MYSQL_DBNAME}
      - REDIS_TYPE=${REDIS_TYPE}
      - MINIO_STORAGE_HOST=${MINIO_STORAGE_1_HOST}
      - MINIO_STORAGE_ACCESS_KEY=${MINIO_STORAGE_1_ACCESS_KEY}
      - MINIO_STORAGE_SECRET_KEY=${MINIO_STORAGE_1_SECRET_KEY}
      - MINIO_STORAGE_BUCKET=${MINIO_STORAGE_1_BUCKET}
      - REDIS_ADDR=${REDIS_ADDR}
    depends_on:
      - mysql
      - redis
      - minio1
    restart: on-failure
    networks:
      - karma8

  storage2:
    container_name: karma8-storage2
    build:
      context: ./
      dockerfile: build/Dockerfile
    ports:
      - "8082:80"
    environment:
      - ENV_NAME=${ENV_NAME}
      - API_VERSION=${API_VERSION}
      - MYSQL_SERVER=${MYSQL_SERVER}
      - MYSQL_DBNAME=${MYSQL_DBNAME}
      - REDIS_TYPE=${REDIS_TYPE}
      - MINIO_STORAGE_HOST=${MINIO_STORAGE_2_HOST}
      - MINIO_STORAGE_ACCESS_KEY=${MINIO_STORAGE_2_ACCESS_KEY}
      - MINIO_STORAGE_SECRET_KEY=${MINIO_STORAGE_2_SECRET_KEY}
      - MINIO_STORAGE_BUCKET=${MINIO_STORAGE_2_BUCKET}
      - REDIS_ADDR=${REDIS_ADDR}
    depends_on:
      - mysql
      - redis
      - minio2
    restart: on-failure
    networks:
      - karma8

  storage3:
    container_name: karma8-storage3
    build:
      context: ./
      dockerfile: build/Dockerfile
    ports:
      - "8083:80"
    environment:
      - ENV_NAME=${ENV_NAME}
      - API_VERSION=${API_VERSION}
      - MYSQL_SERVER=${MYSQL_SERVER}
      - MYSQL_DBNAME=${MYSQL_DBNAME}
      - REDIS_TYPE=${REDIS_TYPE}
      - MINIO_STORAGE_HOST=${MINIO_STORAGE_3_HOST}
      - MINIO_STORAGE_ACCESS_KEY=${MINIO_STORAGE_3_ACCESS_KEY}
      - MINIO_STORAGE_SECRET_KEY=${MINIO_STORAGE_3_SECRET_KEY}
      - MINIO_STORAGE_BUCKET=${MINIO_STORAGE_3_BUCKET}
      - REDIS_ADDR=${REDIS_ADDR}
    depends_on:
      - mysql
      - redis
      - minio3
    restart: on-failure
    networks:
      - karma8
  storage4:
    container_name: karma8-storage4
    build:
      context: ./
      dockerfile: build/Dockerfile
    ports:
      - "8084:80"
    environment:
      - ENV_NAME=${ENV_NAME}
      - API_VERSION=${API_VERSION}
      - MYSQL_SERVER=${MYSQL_SERVER}
      - MYSQL_DBNAME=${MYSQL_DBNAME}
      - REDIS_TYPE=${REDIS_TYPE}
      - MINIO_STORAGE_HOST=${MINIO_STORAGE_4_HOST}
      - MINIO_STORAGE_ACCESS_KEY=${MINIO_STORAGE_4_ACCESS_KEY}
      - MINIO_STORAGE_SECRET_KEY=${MINIO_STORAGE_4_SECRET_KEY}
      - MINIO_STORAGE_BUCKET=${MINIO_STORAGE_4_BUCKET}
      - REDIS_ADDR=${REDIS_ADDR}
    depends_on:
      - mysql
      - redis
      - minio4
    restart: on-failure
    networks:
      - karma8
  storage5:
    container_name: karma8-storage5
    build:
      context: ./
      dockerfile: build/Dockerfile
    ports:
      - "8085:80"
    environment:
      - ENV_NAME=${ENV_NAME}
      - API_VERSION=${API_VERSION}
      - MYSQL_SERVER=${MYSQL_SERVER}
      - MYSQL_DBNAME=${MYSQL_DBNAME}
      - REDIS_TYPE=${REDIS_TYPE}
      - MINIO_STORAGE_HOST=${MINIO_STORAGE_5_HOST}
      - MINIO_STORAGE_ACCESS_KEY=${MINIO_STORAGE_5_ACCESS_KEY}
      - MINIO_STORAGE_SECRET_KEY=${MINIO_STORAGE_5_SECRET_KEY}
      - MINIO_STORAGE_BUCKET=${MINIO_STORAGE_5_BUCKET}
      - REDIS_ADDR=${REDIS_ADDR}
    depends_on:
      - mysql
      - redis
      - minio5
    restart: on-failure
    networks:
      - karma8
  storage6:
    container_name: karma8-storage6
    build:
      context: ./
      dockerfile: build/Dockerfile
    ports:
      - "8086:80"
    environment:
      - ENV_NAME=${ENV_NAME}
      - API_VERSION=${API_VERSION}
      - MYSQL_SERVER=${MYSQL_SERVER}
      - MYSQL_DBNAME=${MYSQL_DBNAME}
      - REDIS_TYPE=${REDIS_TYPE}
      - MINIO_STORAGE_HOST=${MINIO_STORAGE_6_HOST}
      - MINIO_STORAGE_ACCESS_KEY=${MINIO_STORAGE_6_ACCESS_KEY}
      - MINIO_STORAGE_SECRET_KEY=${MINIO_STORAGE_6_SECRET_KEY}
      - MINIO_STORAGE_BUCKET=${MINIO_STORAGE_6_BUCKET}
      - REDIS_ADDR=${REDIS_ADDR}
    depends_on:
      - mysql
      - redis
      - minio6
    restart: on-failure
    networks:
      - karma8
  redis:
    image: redis
    container_name: karma8-redis
    restart: always
    command: redis-server --appendonly no
    ports:
      - "6379:6379"
    networks:
      - karma8

  mysql:
    image: mysql:8.0
    container_name: karma8-mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    volumes:
      - ./data/mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: karma8
      TZ: UTC
    ports:
      - "3306:3306"
    networks:
      karma8:
        ipv4_address: 172.18.0.100
  mc:
    image: minio/mc
    container_name: karma8-minio-client
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio1 http://minio1:9000 minioadmin minioadmin;
      /usr/bin/mc alias set myminio2 http://minio2:9000 minioadmin minioadmin;
      /usr/bin/mc alias set myminio3 http://minio3:9000 minioadmin minioadmin;
      /usr/bin/mc alias set myminio4 http://minio4:9000 minioadmin minioadmin;
      /usr/bin/mc alias set myminio5 http://minio5:9000 minioadmin minioadmin;
      /usr/bin/mc alias set myminio6 http://minio6:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio1/storage;
      /usr/bin/mc mb myminio2/storage;
      /usr/bin/mc mb myminio3/storage;
      /usr/bin/mc mb myminio4/storage;
      /usr/bin/mc mb myminio5/storage;
      /usr/bin/mc mb myminio6/storage;
      /usr/bin/mc policy set public myminio1/storage;
      /usr/bin/mc policy set public myminio2/storage;
      /usr/bin/mc policy set public myminio3/storage;
      /usr/bin/mc policy set public myminio4/storage;
      /usr/bin/mc policy set public myminio5/storage;
      /usr/bin/mc policy set public myminio6/storage;
      /usr/bin/mc admin prometheus generate play system --api-version v3 --public;   
      exit 0;
      "
    depends_on:
      - minio1
      - minio2
    networks:
      - karma8

  minio1:
    image: minio/minio
    container_name: karma8-minio1
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_ACCESS_KEY=minioaccesskey
      - MINIO_SECRET_KEY=miniosecretkey
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio1_data:/data
    networks:
      - karma8

  minio2:
    image: minio/minio
    container_name: karma8-minio2
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_ACCESS_KEY=minioaccesskey
      - MINIO_SECRET_KEY=miniosecretkey
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    ports:
      - "9002:9000"
      - "9003:9001"
    volumes:
      - minio2_data:/data
    networks:
      - karma8
  minio3:
    image: minio/minio
    container_name: karma8-minio3
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_ACCESS_KEY=minioaccesskey
      - MINIO_SECRET_KEY=miniosecretkey
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    ports:
      - "9004:9000"
      - "9005:9001"
    volumes:
      - minio3_data:/data
    networks:
      - karma8
  minio4:
    image: minio/minio
    container_name: karma8-minio4
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_ACCESS_KEY=minioaccesskey
      - MINIO_SECRET_KEY=miniosecretkey
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    ports:
      - "9006:9000"
      - "9007:9001"
    volumes:
      - minio4_data:/data
    networks:
      - karma8
  minio5:
    image: minio/minio
    container_name: karma8-minio5
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_ACCESS_KEY=minioaccesskey
      - MINIO_SECRET_KEY=miniosecretkey
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    ports:
      - "9008:9000"
      - "9009:9001"
    volumes:
      - minio5_data:/data
    networks:
      - karma8
  minio6:
    image: minio/minio
    container_name: karma8-minio6
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_ACCESS_KEY=minioaccesskey
      - MINIO_SECRET_KEY=miniosecretkey
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    ports:
      - "9010:9000"
      - "9011:9001"
    volumes:
      - minio6_data:/data
    networks:
      - karma8
