// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kiper0808/api/internal/gateway/service (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_storage.go -package=mocks github.com/kiper0808/api/internal/gateway/service Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/kiper0808/api/internal/gateway/domain"
	service "github.com/kiper0808/api/internal/gateway/service"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockStorage) DownloadFile(ctx context.Context, id uuid.UUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockStorageMockRecorder) DownloadFile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockStorage)(nil).DownloadFile), ctx, id)
}

// GetMetrics mocks base method.
func (m *MockStorage) GetMetrics(ctx context.Context, storage *domain.Storage) (*service.StorageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, storage)
	ret0, _ := ret[0].(*service.StorageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockStorageMockRecorder) GetMetrics(ctx, storage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockStorage)(nil).GetMetrics), ctx, storage)
}

// UploadFile mocks base method.
func (m *MockStorage) UploadFile(ctx context.Context, file *multipart.FileHeader) (*service.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, file)
	ret0, _ := ret[0].(*service.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockStorageMockRecorder) UploadFile(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockStorage)(nil).UploadFile), ctx, file)
}

// getStoragesWithMetrics mocks base method.
func (m *MockStorage) getStoragesWithMetrics(ctx context.Context) ([]service.StorageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getStoragesWithMetrics", ctx)
	ret0, _ := ret[0].([]service.StorageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getStoragesWithMetrics indicates an expected call of getStoragesWithMetrics.
func (mr *MockStorageMockRecorder) getStoragesWithMetrics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getStoragesWithMetrics", reflect.TypeOf((*MockStorage)(nil).getStoragesWithMetrics), ctx)
}
